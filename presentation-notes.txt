-Welcome
-I'm Peter Seale - @pseale
   - Understanding this is a deep topic, I have spent the last month growing 
      my neckbeard, take my 1 month of 
      neckbeard growth as a metaphor for my authority on the topic. No majestic
      flowing Gandalf beard, just 1 month's worth of authority 

-Goal: SUCCESS IN LIFE
  - success in life 
      <- better programming 
          <- more tools in your toolbox 
             <- tool: message passing
  - therefore, learning message passing will make you a SUCCESS

-Context: learning how to program OOP style
  - at the top of the diagram are the easy, objectively measured parts:
    - C# syntax
    - cohesion/coupling
    - Gang of Four/Head First Design patterns
  - towards the bottom, more subjective/contextual, no absolute universal "better" truth
    - SOLID - objective measures, subjectively improved code
    - DDD's domain model/ports and adapters/hexagon/onion architecture
    - CQRS
    - TDD
    - BDD
    - message passing

-Re-emphasize: message passing is USEFUL but not UNIVERSALLY USEFUL. it's a TOOL

- Alan Kay quote? - put it on screen while I ask the question

- With that in mind, I need to gauge the audience. Who can name some places you SEE message passing in action?
  You don't have to know everything about message passing, just say names of things with "message" in them.
  Looking for answers:
  - Biztalk /NServiceBus / MassTransit (.NET message bus)
  - MSMQ or RabbitMQ - durable messages
  - Azure uses durable messages
  - JavaScript frameworks that listen for server events
  - Event Aggregator as seen in WPF
  - Almost anywhere you have events

- Second question: what languages are known for message passing features?
  - Erlang
  - Scala
  - Go
  - Smalltalk
  - probably others

- Great, you have passed the job interview, you're all hired.

- What is message passing?
   - definition

- More interesting question: what makes message passing different from calling procedures?
  - Don't answer, we'll do this by example

- example: Tic Tac Toe (show procedural code)
  - This is GOOD CODE, it works and is "true to itself".
  - Explain what it does
- now show OO code
  - This is also GOOD CODE. It works and is "true to itself."
  - Actually I lied, OO code is all subjectively bad. Hard to say if it's "good"
  - But at least roles are well defined, objects are small, and there are 
    no obvious (to me) potential improvements.

- now show OO code on right side
  - Ok, see how similar the procedural code is from the OO code?
  - Name 1 improvement the OO code gives.
  - Disclaimer: this is Tic Tac Toe, 99% of anything you do will be 
    more complex. Keep thinking of how this could be useful on bigger projects.
  - Difference: behavior is organized into objects, abstractions hide implementation

- ok. We're almost ready for message passing. We're going to take this OO sample and
  send 1 message. This isn't a total conversion to message passing, only 1 message.
 - Message: The board was updated. 
 - This is a C# event, not even anything unusual.
 - -- awkward
     - but useful in some situations.
  -but awkward. Are you ready for the next round?

- Now get "players" for the tic tac toe game
 - one player per object
 - explain each object's responsibilities and give them a printed sheet for them only
 - Play entire game of tic tac toe using messages

- Reflection time: what was weird about that? Was it natural or unnatural?

- Let's see the code. For just 1 of the simplest objects, the Board.
  - note in constructor we subscribe to a message
  - note in method we do TWO THINGS: 1) work, 2) publish a message
  - note I clone the board, this is an aside
  - Still awkward? Look into registering messages with 
    IoC, people blog about this topic a lot

- More reflection: questions? Can you now see why message passing 
  is different (and sometimes better)?

- Takeaways (read slides, explain)

- Thank you, are there any questions

- Further resources: remember, only 1 month of beard growth. 
  - Udi Dahan's blog
  - Ayende's blog (architecture/messaging tags)
  - Other communities
  - Lots of talk about durable messages, not as much about just message passing




Books:
 - Object Thinking
 - Growing Object Oriented Systems, Guided By Tests (GOOS book)
 - Test Driven Development by Kent Beck

Links:
https://en.wikipedia.org/wiki/Message_passing
http://fitzgeraldnick.com/weblog/39/
	
